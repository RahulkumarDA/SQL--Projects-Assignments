

/*
1. Rank the customers based on the total amount they've spent on rentals.
*/
With Total_rank as (Select customer_id, sum(amount) over(partition by customer_id) as amt_spend from payment)
Select distinct(customer_id), amt_spend, dense_rank() over(order by amt_spend desc) from total_rank;

/*
2. Calculate the cumulative revenue generated by each film over time.
*/

With rental_amount as (
Select film.film_id, title, amount from 
film inner join inventory on 
film.film_id = inventory.film_id 
inner join rental on
inventory.inventory_id = rental.inventory_id
inner join payment on 
rental.rental_id = payment.rental_id)
Select distinct(film_id), title,  sum(amount) over (partition by film_id) as revenue_generated from  rental_amount;

/*
3.Determine the average rental duration for each film, considering films with similar lengths.
*/
Select title , rental_duration ,length, avg(rental_duration) over (partition by length) as Avg_rental_duration from film;

/*
4.Identify the top 3 films in each category based on their rental counts.
*/

With FC as (
Select FILM.FILM_ID, TITLE, FILM_CATEGORY.CATEGORY_ID, category.NAME from film inner join  film_category on 
Film.film_id = film_category.film_id
 inner join category on 
 film_category.category_id = category.category_id),
 RC AS (SELECT distinct(FILM.FILM_ID), COUNT(FILM.FILM_ID) OVER (partition by FILM.FILM_ID) as Rental_count FROM
FILM INNER JOIN INVENTORY ON
FILM.FILM_ID = INVENTORY.FILM_ID 
INNER JOIN RENTAL ON 
INVENTORY.INVENTORY_ID = RENTAL.INVENTORY_ID),
final as (Select fc.film_id, title , name, rental_count, row_number() OVER(partition by name order by rental_count desc)as row_no from
FC inner join RC on
FC.film_id = RC.film_id)
Select * from final
where row_no <=3;

/*
5.Calculate the difference in rental counts between each customer's total rentals and the average rentals
across all customers.
*/

With AVG as (Select customer_id , Avg(count(rental_id)) over() as AVG_COUNT  from rental group by customer_id),
Total as (Select distinct(customer_id), count(customer_id) over(partition by customer_id)AS TOTAL_COUNT from rental)
Select avg.Customer_id, total_count, avg_count from 
AVG INNER JOIN TOTAL ON
AVG.CUSTOMER_ID = TOTAL.CUSTOMER_ID;

/*
6.Find the monthly revenue trend for the entire rental store over time.
*/
Select * from rental;
Select * from store;
Select * from PAYMENT;

Select distinct monthname(payment_date) as Months, sum(amount) over(partition by monthname(payment_date)) as Monthly_revenue from payment;

/* 
7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
*/

With output as (Select customer_id,	 sum(amount), percent_rank() over ( order by sum(amount)) AS P_rank
 from payment group by customer_id order by sum(amount) desC)
 Select * from output where P_rank >=0.80;
 
 /*
 8. Calculate the running total of rentals per category, ordered by rental count.
 */

WitH output as (
Select film.film_id from film inner join inventory on 
film.film_id = inventory.film_id
inner join rental on 
inventory.inventory_id = rental.inventory_id),
output2 as (Select film.film_id, film_category.category_id , name from 
film inner join film_category on
film.film_id = film_category.film_id
inner join category on
film_category.category_id = category.category_id),
output3 as (select distinct(output.film_id), Category_id , name, 
count(output.film_id) over( partition by output.film_id) as rental_count
 from
Output inner join output2 on 
output .film_id = output2.film_id)
Select distinct(name) , sum(rental_count) over(partition by name) as count_of_rental from output3;

/*
9. Find the films that have been rented less than the average rental count for their respective categories.
*/

With FC as (
Select FILM.FILM_ID, TITLE, FILM_CATEGORY.CATEGORY_ID, category.NAME from film inner join  film_category on 
Film.film_id = film_category.film_id
 inner join category on 
 film_category.category_id = category.category_id),
 RC AS (SELECT distinct(FILM.FILM_ID), COUNT(FILM.FILM_ID) OVER (partition by FILM.FILM_ID) as Rental_count FROM
FILM INNER JOIN INVENTORY ON
FILM.FILM_ID = INVENTORY.FILM_ID 
INNER JOIN RENTAL ON 
INVENTORY.INVENTORY_ID = RENTAL.INVENTORY_ID),
OUTPUT AS (Select FC.film_id, title, category_id , name, rental_count, AVG(RENTAL_COUNT) OVER (PARTITION BY NAME) AS AVG_RENTAL_COUNT from
FC inner join RC on
FC.film_id = RC.film_id)
Select *,
case when avg_rental_count < rental_count then "true" else "false" end as "Result"
 from output;
 
 /*
 10.Identify the top 5 months with the highest revenue and display the revenue generated in each month.
*/

With output1 as (Select monthname(payment_date) as month_name , sum(amount) over (partition by payment_date) as payment from  payment)
Select distinct(month_name) , sum(payment) over (partition by month_name) as revenue_per_month from output1;
